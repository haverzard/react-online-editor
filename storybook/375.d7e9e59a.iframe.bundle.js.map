{"version":3,"file":"375.d7e9e59a.iframe.bundle.js","mappings":";;AA6FA;AACA;;AAGA;AAkCA;AACA;;AAIA","sources":["webpack://react-online-editor/./node_modules/@vue/babel-plugin-jsx/dist/index.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst t = __importStar(require(\"@babel/types\"));\nconst template_1 = __importDefault(require(\"@babel/template\"));\nconst plugin_syntax_jsx_1 = __importDefault(require(\"@babel/plugin-syntax-jsx\"));\nconst helper_module_imports_1 = require(\"@babel/helper-module-imports\");\nconst transform_vue_jsx_1 = __importDefault(require(\"./transform-vue-jsx\"));\nconst sugar_fragment_1 = __importDefault(require(\"./sugar-fragment\"));\nconst hasJSX = (parentPath) => {\n    let fileHasJSX = false;\n    parentPath.traverse({\n        JSXElement(path) {\n            // skip ts error\n            fileHasJSX = true;\n            path.stop();\n        },\n        JSXFragment(path) {\n            fileHasJSX = true;\n            path.stop();\n        },\n    });\n    return fileHasJSX;\n};\nconst JSX_ANNOTATION_REGEX = /\\*?\\s*@jsx\\s+([^\\s]+)/;\nexports.default = ({ types }) => ({\n    name: 'babel-plugin-jsx',\n    inherits: plugin_syntax_jsx_1.default,\n    visitor: Object.assign(Object.assign(Object.assign({}, transform_vue_jsx_1.default), sugar_fragment_1.default), { Program: {\n            enter(path, state) {\n                if (hasJSX(path)) {\n                    const importNames = [\n                        'createVNode',\n                        'Fragment',\n                        'resolveComponent',\n                        'withDirectives',\n                        'vShow',\n                        'vModelSelect',\n                        'vModelText',\n                        'vModelCheckbox',\n                        'vModelRadio',\n                        'vModelText',\n                        'vModelDynamic',\n                        'resolveDirective',\n                        'mergeProps',\n                        'createTextVNode',\n                        'isVNode',\n                    ];\n                    if (helper_module_imports_1.isModule(path)) {\n                        // import { createVNode } from \"vue\";\n                        const importMap = {};\n                        importNames.forEach((name) => {\n                            state.set(name, () => {\n                                if (importMap[name]) {\n                                    return types.cloneNode(importMap[name]);\n                                }\n                                const identifier = helper_module_imports_1.addNamed(path, name, 'vue', {\n                                    ensureLiveReference: true,\n                                });\n                                importMap[name] = identifier;\n                                return identifier;\n                            });\n                        });\n                        const { enableObjectSlots = true } = state.opts;\n                        if (enableObjectSlots) {\n                            state.set('@vue/babel-plugin-jsx/runtimeIsSlot', () => {\n                                if (importMap.runtimeIsSlot) {\n                                    return importMap.runtimeIsSlot;\n                                }\n                                const { name: isVNodeName } = state.get('isVNode')();\n                                const isSlot = path.scope.generateUidIdentifier('isSlot');\n                                const ast = template_1.default.ast `\n                  function ${isSlot.name}(s) {\n                    return typeof s === 'function' || (Object.prototype.toString.call(s) === '[object Object]' && !${isVNodeName}(s));\n                  }\n                `;\n                                const lastImport = path.get('body')\n                                    .filter((p) => p.isImportDeclaration())\n                                    .pop();\n                                if (lastImport) {\n                                    lastImport.insertAfter(ast);\n                                }\n                                importMap.runtimeIsSlot = isSlot;\n                                return isSlot;\n                            });\n                        }\n                    }\n                    else {\n                        // var _vue = require('vue');\n                        let sourceName;\n                        importNames.forEach((name) => {\n                            state.set(name, () => {\n                                if (!sourceName) {\n                                    sourceName = helper_module_imports_1.addNamespace(path, 'vue', {\n                                        ensureLiveReference: true,\n                                    });\n                                }\n                                return t.memberExpression(sourceName, t.identifier(name));\n                            });\n                        });\n                        const helpers = {};\n                        const { enableObjectSlots = true } = state.opts;\n                        if (enableObjectSlots) {\n                            state.set('@vue/babel-plugin-jsx/runtimeIsSlot', () => {\n                                if (helpers.runtimeIsSlot) {\n                                    return helpers.runtimeIsSlot;\n                                }\n                                const isSlot = path.scope.generateUidIdentifier('isSlot');\n                                const { object: objectName } = state.get('isVNode')();\n                                const ast = template_1.default.ast `\n                  function ${isSlot.name}(s) {\n                    return typeof s === 'function' || (Object.prototype.toString.call(s) === '[object Object]' && !${objectName.name}.isVNode(s));\n                  }\n                `;\n                                const nodePaths = path.get('body');\n                                const lastImport = nodePaths\n                                    .filter((p) => p.isVariableDeclaration()\n                                    && p.node.declarations.some((d) => { var _a; return ((_a = d.id) === null || _a === void 0 ? void 0 : _a.name) === sourceName.name; }))\n                                    .pop();\n                                if (lastImport) {\n                                    lastImport.insertAfter(ast);\n                                }\n                                return isSlot;\n                            });\n                        }\n                    }\n                    const { opts: { pragma = '' }, file, } = state;\n                    if (pragma) {\n                        state.set('createVNode', () => t.identifier(pragma));\n                    }\n                    if (file.ast.comments) {\n                        for (const comment of file.ast.comments) {\n                            const jsxMatches = JSX_ANNOTATION_REGEX.exec(comment.value);\n                            if (jsxMatches) {\n                                state.set('createVNode', () => t.identifier(jsxMatches[1]));\n                            }\n                        }\n                    }\n                }\n            },\n            exit(path) {\n                const body = path.get('body');\n                const specifiersMap = new Map();\n                body\n                    .filter((nodePath) => t.isImportDeclaration(nodePath.node)\n                    && nodePath.node.source.value === 'vue')\n                    .forEach((nodePath) => {\n                    const { specifiers } = nodePath.node;\n                    let shouldRemove = false;\n                    specifiers.forEach((specifier) => {\n                        if (!specifier.loc\n                            && t.isImportSpecifier(specifier)\n                            && t.isIdentifier(specifier.imported)) {\n                            specifiersMap.set(specifier.imported.name, specifier);\n                            shouldRemove = true;\n                        }\n                    });\n                    if (shouldRemove) {\n                        nodePath.remove();\n                    }\n                });\n                const specifiers = [...specifiersMap.keys()].map((imported) => specifiersMap.get(imported));\n                if (specifiers.length) {\n                    path.unshiftContainer('body', t.importDeclaration(specifiers, t.stringLiteral('vue')));\n                }\n            },\n        } }),\n});\n"],"names":[],"sourceRoot":""}